import TastytradeHttpClient from "./services/tastytrade-http-client";
import { AccountStreamer, STREAMER_STATE, Disposer, StreamerStateObserver } from './account-streamer';
import MarketDataStreamer, { CandleSubscriptionOptions, CandleType, MarketDataSubscriptionType, MarketDataListener } from "./market-data-streamer";
import SessionService from "./services/session-service";
import AccountStatusService from "./services/account-status-service";
import AccountsAndCustomersService from "./services/accounts-and-customers-service";
import BalancesAndPositionsService from "./services/balances-and-positions-service";
import InstrumentsService from "./services/instruments-service";
import MarginRequirementsService from "./services/margin-requirements-service";
import MarketMetricsService from "./services/market-metrics-service";
import NetLiquidatingValueHistoryService from "./services/net-liquidating-value-history-service";
import OrderService from "./services/orders-service";
import RiskParametersService from "./services/risk-parameters-service";
import SymbolSearchService from "./services/symbol-search-service";
import TransactionsService from "./services/transactions-service";
import WatchlistsService from "./services/watchlists-service";
import TastytradeSession from "./models/tastytrade-session";
import PopService from "./services/pop-service";
export default class TastytradeClient {
    readonly baseUrl: string;
    readonly accountStreamerUrl: string;
    readonly httpClient: TastytradeHttpClient;
    readonly accountStreamer: AccountStreamer;
    readonly sessionService: SessionService;
    readonly accountStatusService: AccountStatusService;
    readonly accountsAndCustomersService: AccountsAndCustomersService;
    readonly balancesAndPositionsService: BalancesAndPositionsService;
    readonly instrumentsService: InstrumentsService;
    readonly marginRequirementsService: MarginRequirementsService;
    readonly marketMetricsService: MarketMetricsService;
    readonly netLiquidatingValueHistoryService: NetLiquidatingValueHistoryService;
    readonly orderService: OrderService;
    readonly riskParametersService: RiskParametersService;
    readonly symbolSearchService: SymbolSearchService;
    readonly transactionsService: TransactionsService;
    readonly watchlistsService: WatchlistsService;
    readonly popService: PopService;
    constructor(baseUrl: string, accountStreamerUrl: string);
    get session(): TastytradeSession;
}
export { MarketDataStreamer, MarketDataSubscriptionType, MarketDataListener, CandleSubscriptionOptions, CandleType };
export { AccountStreamer, STREAMER_STATE, Disposer, StreamerStateObserver };
